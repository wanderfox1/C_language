#define A 0
#define B 10
// right output fond in a file
void method_euler(double);

void method_euler_mod(double);

void method_euler_improve(double);

void method_runge_kutt(double);

double f (double, double);

double f_1 (double, double);

double f (double x, double y) {
	return (pow(y, 2) / (x - y)) - 2*x*y;
}

//     y(0) = 1
double f_1 (double x, double y) {
	return (-2) * y * (pow(x, 2) / 2) + pow(y, 2) * log(fabs(x - y)) + 1;
}
//
int main(void) {

  int i = 0;
  double h, step[3] = {0.5, 0.1, 0.01};

  for(i = 0; i < 3; i++) {

    h = step[i];
    printf("current value of h == %lf\n", h);
    method_euler(h);
//    method_euler_mod(h);

//    method_euler_improve(h);
//    method_runge_kutt(h);
  }
  return 0;
}

void method_euler(double h) {
    printf("Method Euler : \n");

    double x = 0, y = 1, n;

    n = (B - A) / h;

    for(int i = 0; i < n; i ++){

        y += h * f(x, y); // new y
        x += h; // new x
        printf("\nx[%d] = %f\t\t y[%d] = %f\n", i, x, i, y);  // t = tab
    }
}

void method_euler_mod(double h){
    printf("Method Euler_Mod : \n");

    double x = 0, y = 1, n, pred;
    n = (B - A) / h;

    for (int i = 0; i < n; i++){
        pred = y + h * f(x, y);
        y += h * (f(x, y) + f(x + h, pred)) / 2;

        x += h;
    printf("\nx[%d] = %f\t\t y[%d] = %f\n", i, x, i, y);  // t = tab
    }
}

void method_euler_improve(double h){
    printf("Method Euler_Improve : \n");

    double x = 0, y = 1, y_1, y_2, n;
    n = (B - A) / h;

    for(int i = 0; i < n; i++){

    y_1 = f(x, y);
    y_2 = f(x + h, y + h * y_1);
    y += h * (y_1 + y_2) / 2;

    x += h;

    printf("\nx[%d] = %f\t\t y[%d] = %f\n", i, x, i, y);  // t = tab
    }
}


void method_runge_kutt(double h){
    printf("Method runge_kutt : \n");

    double x = 0, y = 1, n;
    n = (B - A) / h;
    double k_0, k_1, k_2, k_3;

    for(int i = 0; i < n; i ++){

            k_0 = f(x, y) * h;
            k_1 = f(x + h / 2, y + k_0 / 2) * h;
            k_2 = f(x + h / 2, y + k_1 / 2) * h;
            k_3 = f(x + h, y + k_2)* h;

            y += (k_0 + 2 * k_1 + 2 * k_2 + k_3) / 6;
            x += h;

            printf("\nx[%d] = %lf\t\t y[%d] = %lf\n", i, x, i, y);  // t = tab
    }
}
