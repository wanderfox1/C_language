#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#define A 2
#define B 6.8
#define EPS 0.001 // calculation accuracy

//Подынтегральная функция
double f(double x) {
    return ( (7 * pow(x, 4)) - pow(x, 5) - 2 );
}

int main(void)
{
    printf("Original : 3833.422848\n");

    Left_Rect();
    Right_Rect();
    Trapeze();
    Middle_Rect();
    Right_simpson();
}

void Left_Rect(){
    printf("Left Rectangle's method : \n");
    int i = 0, n = 1;
    double h = (B - A) / n;
    double diff = 0, res_be = 0.0, res = 0.0 ;
    do {
                res_be = res;
                n *= 2;
                h = (B - A) / n;
                res = 0.0;
                for (i = 0; i <= n - 1; i++ ){
                    res += h * f(A + i * h);
                }
        printf("%d %lf %lf %lf %lf\n", n, h, res, res_be, fabs(res - res_be));

    } while (fabs(res - res_be) > EPS);
    printf("\n");
}

void Right_simpson(){
    printf("Simpson's method : ");
    printf("\n");
    int i = 0, n = 1;
    double h = (B - A) / (2*n);
    double diff = 0, res_be = 0.0, res = 0.0 ;
    do {
                res_be = res;
                n *= 2;
                h = (B - A) / (2*n);
                res = 0.0;
                for (i = 0; i < n; i++ ){
                    res += h * (f(A+ 2*i*h) + 4*f(A+ (2 * i + 1) * h) + f(A+ ( 2 * i + 2) * h)) / 3;
                }
        printf("%d %lf %lf %lf %lf\n", n, h, res, res_be, fabs(res - res_be));

    } while ( fabs(res - res_be) > EPS);


    printf("\n");
}

void Right_Rect(){
    printf("Right Rectangle's method : \n");
    int i = 0, n = 1;
    double h = (B - A) / n;
    double diff = 0, res_be = 0.0, res = 0.0 ;
    do {
                res_be = res;
                n *= 2;
                h = (B - A) / (n);
                res = 0.0;
                for (i = 1; i <= n; i++ ){
                    res += h * f(A + i*h);
                }
        printf("%d %lf %lf %lf %lf\n", n, h, res, res_be, fabs(res - res_be));

    } while ( fabs(res - res_be) > EPS);


    printf("\n");
}

void Middle_Rect(){
    printf("Middle_Rect's method : ");
    printf("\n");
    int i, n = 1;
    double h = (B - A) / (n);
    double diff = 0, res_be = 0.0, res = 0.0 ;
    do {
                res_be = res;
                n *= 2;
                h = (B - A) / (n);
                res = 0.0;
                for (i = 0; i < n; i++){
                    res += f(A + h / 2 + i*h);
                }
                res *= h;
        printf("%d %lf %lf %lf %lf\n", n, h, res, res_be, fabs(res - res_be));

    } while ( fabs(res - res_be) > EPS);


    printf("\n");
}

void Trapeze(){
    printf("Trapeze's method : ");
    printf("\n");
    int i, n = 1;
    double h = (B - A) / n;
    double diff = 0, res_be = 0.0, res = 0.0 ;
    res = f(A) + f(B);
    do {
                res_be = res;
                n *= 2;
                h = (B - A) / n;
                res = 0.0;

                for (i = 0; i < n; i++){
                    res += h * (f(A + h*i) + f(A + h *(i + 1))) / 2;
                }
        printf("%d %lf %lf %lf %lf\n", n, h, res, res_be, fabs(res - res_be));

    } while ( fabs(res - res_be) > EPS);


    printf("\n");
}


