#include <stdlib.h>
#include <stdio.h>
#include <time.h>
#define N 25
#define B 25000
#define A -25000
#define factor 1.2473309
// A - minim, B - maxim

void generation();

void read_file(int array[N]);

void selection_sort();

void bubble_sort();

void comb_sort_2();

void comb_sort();

void method_quick_sort(int array[N], int left, int right);

long counterquick = 0;

int main() {
    generation();
//    bubble_sort();
    //comb_sort();
    //selection_sort();
//    comb_sort_2();


    // Раскоммениторвать, когда нужна быстрая сортировка

    quick_sort();

}

void quick_sort(){

    int array[N] = {0};
    read_file(array);
    printArray(array);

    clock_t start = clock();
    method_quick_sort(array, 0, N - 1);

    clock_t end = clock();
    double cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC;
    printf("\n");
    printf( "After SORT \n");

    printArray(array);
    printf("\n");
    printf("Quick_sort_2 is ended. \n");

    printf("Iterations == ");
    printf("%d", counterquick);
    printf("\n");
    printf("Time == ");
    printf("%lf", cpu_time_used);

}

void printArray(int array[N]) {
  for (int i = 0; i < N; ++i) {
    printf("%d  ", array[i]);
  }
  printf("\n");
}

void swap(int *a, int *b) {
  int t = *a;
  *a = *b;
  *b = t;
}

void generation()
{
    int number, i;
    FILE * f = fopen("input.txt", "w");
    for (i = 0; i < N; i++) {
		number = A + rand() % (B - A + 1);
		fprintf(f, "%d ", number);
	}
    fclose(f);
}

void read_file(int array[N]){
    int i;
    FILE * f = fopen("input.txt", "r");
    if(f == 0){
        printf("error with file");
        exit(1);
    }
    printf( "Before SORT \n");
    for (i = 0; i < N; i++) {
        fscanf(f, "%d", &array[i]);
    }
}

// Пo возрастанию. Все сортировки.
void bubble_sort(){
    printf("Buble_sort is started. \n");
    int count = 1, array[N] = {0}, d, temp, c;
    unsigned bub_iter = 0;

    read_file(array);
    printArray(array);

    clock_t start = clock();

    while(count > 0){
            count = 0;
            for (c = 0 ; c < N - 1; c++) {
                for (d = 0 ; d < N - c - 1; d++) { // How???
                    if (array[d] > array[d+1]) {
                        temp = array[d];
                        array[d]   = array[d+1];
                        array[d+1] = temp;
                        bub_iter++;
                    }
                }
            }


    }

    clock_t end = clock();
    double cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC;
    printf( "After SORT \n");

    printArray(array);
    printf("\n");
    printf("Buble_sort is ended. \n");

    printf("Iterations == ");
    printf("%d", bub_iter);
    printf("\n");
    printf("Time == ");
    printf("%lf", cpu_time_used);

}

void comb_sort(){
    int iter = 0;
    printf("Comb_sort is started. \n");
    time_t begin = time(NULL);
    int array[N] = {0};
    int i, step;
    read_file(array);
    printArray(array);
    step = N - 1;
    printf("\n");

    clock_t start = clock();
    while (step >= 1){
            for (i = 0; i < N - step;i++) {
                if (array[i] > array[i + step]){
                    int tmp = array[i];
                    swap(&array[i], &array[i + step]);
                    iter++;
                }
            }
    step /= factor;
    }
    clock_t end = clock();
    double cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC;

    printf("\n");
    printf( "After SORT \n");

    printArray(array);
    printf("\n");
    printf("Comb_sort is ended. \n");

    printf("Iterations == ");
    printf("%d", iter);

    printf("\n");
    printf("Time == ");
    printf("%lf", cpu_time_used);
}

void selection_sort(){
    printf("Selection_sort is started. \n");
    int array[N] = {0};
    int i, j, min_ind, iter = 0;
    read_file(array);

    printArray(array);
    clock_t start = clock();
    // Finding index of min_number
    for (i = 0; i < N-1; i++) {
        min_ind = i;
        for (j = i + 1; j < N; j++) {
          if (array[j] < array[min_ind]) {
            min_ind = j;
          }
        }

        if (min_ind != i){
                int tmp = array[i];
                swap(&array[i], &array[min_ind]);
                iter++;
        }
    }
    clock_t end = clock();
    double cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC;
    printf("\n");
    printf( "After SORT \n");

    printArray(array);
    printf("\n");
    printf("Selection_sort is ended. \n");
    printf("Iterations == ");
    printf("%d", iter);
    printf("\n");

    printf("Time == ");
    printf("%lf", cpu_time_used);
}

void comb_sort_2(){
    printf("Comb_sort_2 is started. \n");

    int count, g, temp = 0, array[N] = {0}, iter;
    read_file(array);

    printArray(array);

    clock_t start = clock();
    for(g =(N/2); g > 0; g/=2){
        do{
            count = 0;
            for(int i = 0; i < (N-g); i++){
                if(array[i] > array[i + g]){
                   swap(&array[i], &array[i + g]);
                   count++;
                   iter++;
                }
            }
        }while(count > 0);
    }

    clock_t end = clock();
    double cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC;
    printf("\n");
    printf( "After SORT \n");

    printArray(array);
    printf("\n");
    printf("Comb_sort_2 is ended. \n");

    printf("Iterations == ");
    printf("%d", iter);
    printf("\n");

    printf("Time == ");
    printf("%lf", cpu_time_used);
}

void method_quick_sort(int array[N], int L, int R){
    int temp, iter = 0;
    int left = L, right = R, x = L;
    if(L < R){
        while(left < right){
            while((array[left] <= array[x])&&(left < R))
                left++;
            while(array[right] > array[x])
                right--;
            if(left < right){
                temp = array[left];
                array[left] = array[right];
                array[right] = temp;
                counterquick++;
            }
        }
    temp = array[x];
    array[x] = array[right];
    array[right] = temp;
    iter++;
    method_quick_sort(array, L, right - 1);
    method_quick_sort(array, right + 1,R);
    }
}
